Introduction to UART (PL011)
The UART (Universal Asynchronous Receiver/Transmitter) is a communication peripheral used in ARM-based System-on-Chip (SoC) designs. It is developed and licensed by ARM and follows the AMBA (Advanced Microcontroller Bus Architecture) specification, making it easy to integrate into ARM-based systems.
This UART connects to the APB (Advanced Peripheral Bus), which is part of the AMBA system. It also includes support for IrDA SIR (Infrared Data Association Serial Infrared) protocol ‚Äì allowing infrared data communication.
________________________________________
‚úÖ Key Features of the UART
‚Ä¢	AMBA-compliant: Works well with other components in the AMBA-based system (Rev 2.0 and above).
‚Ä¢	Supports UART and IrDA SIR modes: Can send and receive data either through normal serial wires or through infrared.
‚Ä¢	FIFO Buffers:
o	32-byte transmit buffer (32x8)
o	32-byte receive buffer (32x12)
o	These reduce the number of times the CPU is interrupted.
o	FIFO can also be disabled for single-byte data.
‚Ä¢	Programmable Baud Rate Generator:
o	Allows setting the speed of data transmission.
o	Divides the clock with fine granularity to support various data rates.
o	Supports fractional values, so any clock (e.g., 3.6864 MHz) can be used.
‚Ä¢	Standard Serial Communication Bits:
o	Adds start bit, stop bit, and parity bit automatically during data transmission and removes them during reception.
‚Ä¢	Interrupt Management:
o	You can individually enable/disable interrupts for different events like:
ÔÇß	Transmit FIFO
ÔÇß	Receive FIFO
ÔÇß	Receive timeout
ÔÇß	Modem status
ÔÇß	Error conditions
‚Ä¢	DMA (Direct Memory Access) support for efficient data transfer.
‚Ä¢	Special Features:
o	Detects false start bits (incorrect data starts)
o	Can generate and detect line breaks (used for special control)
o	Supports hardware modem control: CTS, RTS, DSR, DCD, DTR, and RI.
o	Hardware flow control can be programmed (automatically manages data flow to prevent overflow)
________________________________________
üîß Programmable Settings
You can configure:
‚Ä¢	Baud rate: Choose how fast data is transmitted.
‚Ä¢	Number of data bits: 5, 6, 7, or 8 bits
‚Ä¢	Number of stop bits: 1 or 2
‚Ä¢	Parity mode: Even, odd, stick (fixed), or none
‚Ä¢	FIFO depth: Use full 32-depth or disable it for 1-byte operation
‚Ä¢	Trigger levels for FIFO: Choose when an interrupt is generated (like at 4 bytes full)
‚Ä¢	Clock frequency settings: Supports low-power IrDA mode
‚Ä¢	Hardware flow control: Optional control using modem signals
________________________________________
üîÑ Difference from Older UART (16C650)
This UART is not backward-compatible with the older PL010 or 16C650 UARTs. Here are the differences:
‚Ä¢	Different FIFO trigger levels
‚Ä¢	Different register map and bit functions
‚Ä¢	No support for 1.5 stop bits (only 1 or 2 are allowed)
‚Ä¢	No support for independent receive clock
‚Ä¢	Modem delta status signals are not available
________________________________________
Summary
The ARM PL011 UART is a powerful, programmable serial communication module that supports both traditional UART and infrared data transfer. It offers flexible settings, FIFO buffers, interrupt controls, and DMA support, making it suitable for a wide range of embedded applications. It's also more advanced than older UART designs like the 16C650, though not backward compatible.
UART Product Revisions (Version Changes)
The UART module has gone through several revisions (updates), and each revision may include functional changes or improvements. These changes are reflected in a special register called the UARTPeriphID2 register, specifically in bits [7:4], which identify the revision number.
üìã Summary of Revisions:
Revision Range	What's Changed?
r1p0 ‚Üí r1p1	- The UARTPeriphID2 register bits [7:4] now return 0x1
r1p1 ‚Üí r1p3	- The UARTPeriphID2 register bits [7:4] now return 0x2
r1p3 ‚Üí r1p4	- No change in the revision field; still 0x2
r1p4 ‚Üí r1p5	- Transmit and receive FIFOs are increased to 32-depth (more buffer size)
- UARTPeriphID2 register bits [7:4] now return 0x3
________________________________________
üìå Note:
For more technical details or bugs in any version, you should refer to the engineering errata provided along with the product documentation.
üìò Chapter 2: Functional Overview of UART
This chapter explains the main working blocks and capabilities of the UART (Universal Asynchronous Receiver/Transmitter) peripheral in an ARM-based SoC.
________________________________________
üìë Sections in Chapter 2
1.	Overview
2.	Functional Description
3.	IrDA SIR ENDEC Functional Description
4.	UART Operation
5.	UART Modem Operation
6.	UART Hardware Flow Control
7.	UART DMA Interface
8.	Interrupts
________________________________________
üîç Overview
‚úÖ Main Functions
The UART performs:
‚Ä¢	Serial-to-parallel conversion: Converts data coming from outside (peripheral) into a format the CPU can process.
‚Ä¢	Parallel-to-serial conversion: Converts data from the CPU into serial format to send out.
‚úÖ Data Access
‚Ä¢	CPU reads/writes data and control/status via the APB (Advanced Peripheral Bus).
‚Ä¢	Data paths (transmit and receive) use independent FIFO buffers:
o	32-byte Transmit FIFO
o	32-byte Receive FIFO
These buffers help reduce the number of CPU accesses and avoid data loss.
________________________________________
‚è±Ô∏è Baud Rate and Clock
‚Ä¢	The UART includes a programmable baud rate generator.
‚Ä¢	It derives a shared clock for transmitting and receiving from the UARTCLK reference input.
‚Ä¢	It supports similar functions to the industry-standard 16C650 UART.
üìà Maximum Supported Baud Rates:
Mode	Max Baud Rate
UART mode	921,600 bps
IrDA mode	460,800 bps
Low-power IrDA mode	115,200 bps
Registers to configure baud rate and format:
‚Ä¢	UARTLCR_H ‚Äì Line control (data length, stop bits, parity)
‚Ä¢	UARTIBRD ‚Äì Integer baud rate divisor
‚Ä¢	UARTFBRD ‚Äì Fractional baud rate divisor
________________________________________
üîî Interrupts
UART can generate individually maskable interrupts for:
‚Ä¢	Transmit
‚Ä¢	Receive (including timeout)
‚Ä¢	Modem status
‚Ä¢	Error conditions
You can also enable a single combined interrupt: asserted if any unmasked condition occurs.
________________________________________
üì¶ DMA Support
UART can raise DMA request signals to allow direct data transfer between memory and UART ‚Äî bypassing the CPU ‚Äî for efficient high-speed communication.
________________________________________
‚ö†Ô∏è Error Handling
‚Ä¢	Framing, parity, or break errors:
o	Corresponding error bits are set
o	Data is still stored in the FIFO with error status
‚Ä¢	Overrun condition:
o	Happens when FIFO is full and new data arrives
o	Overrun bit is set
o	New data is discarded (FIFO content is protected)
You can also configure FIFO to 1-byte depth, making it behave like a simple double-buffered UART.
________________________________________
üìû Modem Control Signals
UART supports standard modem signals:
‚Ä¢	Input signals:
o	CTS (Clear To Send)
o	DCD (Data Carrier Detect)
o	DSR (Data Set Ready)
o	RI (Ring Indicator)
‚Ä¢	Output signals:
o	RTS (Request To Send)
o	DTR (Data Terminal Ready)
________________________________________
üîÑ Hardware Flow Control
‚Ä¢	Uses nUARTCTS (input) and nUARTRTS (output) signals
‚Ä¢	Automatically manages flow of data based on line status
‚Ä¢	Prevents overflow or data loss during high-speed transfers
________________________________________
üåê IrDA SIR Block (Infrared Communication)
‚Ä¢	UART includes an IrDA SIR protocol ENDEC (encoder/decoder)
‚Ä¢	Instead of standard serial pins (UARTTXD, UARTRXD), it uses:
o	SIROUT (output)
o	SIRIN (input)
‚Ä¢	Works with an infrared transceiver
‚öôÔ∏è Behavior When IrDA is Enabled:
‚Ä¢	UARTTXD line stays HIGH (inactive)
‚Ä¢	UARTRXD and modem status signals are ignored
‚Ä¢	IrDA works in half-duplex mode:
o	Can either transmit or receive, but not both at the same time
‚Ä¢	IrDA requires a minimum 10ms delay between transmission and reception.
________________________________________
‚úÖ Summary
The UART module offers:
‚Ä¢	Reliable data transfer using FIFOs and baud rate generator
‚Ä¢	Configurable data format and flow control
‚Ä¢	Support for interrupts and DMA
‚Ä¢	Modem interface signals for serial communication standards
‚Ä¢	Infrared (IrDA) communication option
2.2 UART Functional Description
üîπ Top-Level View
The UART block can be divided into 5 functional parts:
1.	APB Interface & Register Block
2.	Baud Rate Generator
3.	Transmit Path
4.	Receive Path
5.	FIFO & Interrupt/DMA Handling
________________________________________
1Ô∏è‚É£ APB Interface and Register Block
‚Ä¢	Signals: PCLK, PSEL, PENABLE, PWRITE, PADDR, PWDATA, PRDATA
‚Ä¢	This is how the processor (CPU / APB bus master) configures and communicates with UART.
‚Ä¢	Functions:
o	Configure baud rate divisor, control registers, interrupt enable, FIFO control, etc.
o	Write to TX FIFO (data to send).
o	Read from RX FIFO (received data).
o	Expose status flags (empty/full/error).
________________________________________
2Ô∏è‚É£ Baud Rate Generator
‚Ä¢	Takes UARTCLK (reference clock).
‚Ä¢	Uses baud rate divisor to generate a Baud16 clock ‚Üí 16√ó oversampling for accurate RX sampling.
‚Ä¢	Ensures correct transmit timing and receive sampling.
________________________________________
3Ô∏è‚É£ Transmit Path
‚Ä¢	32√ó8 Transmit FIFO
o	Stores outgoing characters (up to 32 bytes).
o	CPU or DMA writes into it via APB.
‚Ä¢	Transmitter
o	Fetches data from FIFO.
o	Adds start bit, data bits, parity (if enabled), stop bit(s) ‚Üí forming the UART frame.
o	Sends serialized data via UARTTXD.
o	If IrDA SIR mode ‚Üí passes through SIR encoder ‚Üí nSIROUT.
________________________________________
4Ô∏è‚É£ Receive Path
‚Ä¢	UART input pin: UARTRXD (or SIRIN if using IrDA).
‚Ä¢	Receiver
o	Samples input at 16√ó baud rate (Baud16).
o	Detects start bit, shifts in data bits, checks parity & stop bits.
o	Pushes valid data into 32√ó12 Receive FIFO (stores data + error flags).
‚Ä¢	CPU/DMA reads from RX FIFO via APB.
________________________________________
5Ô∏è‚É£ FIFO Status & Interrupt Generation
‚Ä¢	Monitors:
o	TX FIFO status (empty, almost full, etc.).
o	RX FIFO status (full, threshold reached, etc.).
o	Error conditions (parity, framing, overrun).
‚Ä¢	Generates interrupts:
o	UARTTXINTR, UARTRXINTR, UARTMSINTR, UARTRTINTR, etc.
‚Ä¢	Works with DMA interface for high-speed data transfer:
o	UARTRXDMASREQ / UARTTXDMASREQ for DMA requests.
o	UARTRXDMAACK / UARTTXDMAACK for acknowledgements.
________________________________________
üîπ Reset Signals
‚Ä¢	PRESETn (global reset) + nUARTRST (block reset).
‚Ä¢	Reset clears FIFOs and control registers.
________________________________________
üîπ Data Flow Summary
1.	CPU writes a byte ‚Üí APB bus ‚Üí TX FIFO ‚Üí Transmitter ‚Üí UARTTXD pin.
2.	Remote data arrives on RXD ‚Üí Receiver ‚Üí RX FIFO ‚Üí CPU/DMA reads via APB.
3.	Baud rate generator ensures correct timing.
4.	FIFO + Interrupt/DMA make data movement efficient.
________________________________________
‚úÖ In short:
‚Ä¢	The APB interface is the control brain.
‚Ä¢	The baud rate generator sets timing.
‚Ä¢	TX FIFO ‚Üí Transmitter ‚Üí UARTTXD handles sending.
‚Ä¢	RXD ‚Üí Receiver ‚Üí RX FIFO handles receiving.
‚Ä¢	FIFO status + Interrupt/DMA provide efficient, error-checked communication.
.
________________________________________
üß± Main Blocks Described in This Section
Each sub-block plays a distinct role in the UART‚Äôs operation. Here‚Äôs a concise explanation:
________________________________________
2.2.1 AMBA APB Interface
‚Ä¢	Interfaces UART with the CPU via APB bus.
‚Ä¢	Handles read/write decoding for:
o	Status/control registers
o	Transmit FIFO
o	Receive FIFO
________________________________________
2.2.2 Register Block
‚Ä¢	Stores:
o	Data written via APB
o	Data read by the CPU
‚Ä¢	Acts as the access point for UART configuration and control.
________________________________________
2.2.3 Baud Rate Generator
‚Ä¢	Generates internal timing signals for:
o	UART mode: Baud16 (16√ó baud rate)
o	Low-power IrDA mode: IrLPBaud16
‚Ä¢	These are derived from the UARTCLK (reference clock).
‚Ä¢	Ensures proper timing for:
o	Transmit and receive logic
o	IrDA pulse width generation
________________________________________
2.2.4 Transmit FIFO
‚Ä¢	8-bit wide, 32-entry buffer
‚Ä¢	Temporarily holds data written by CPU before sending
‚Ä¢	Can be disabled to behave like a 1-byte register
________________________________________
2.2.5 Receive FIFO
‚Ä¢	12-bit wide, 32-entry buffer
‚Ä¢	Holds received data plus error status bits
‚Ä¢	Can also be disabled to act like a 1-byte register
________________________________________
2.2.6 Transmit Logic
‚Ä¢	Reads from the Transmit FIFO
‚Ä¢	Converts parallel data to serial
‚Ä¢	Sends frame:
o	Start bit
o	Data bits (LSB first)
o	Parity bit (if configured)
o	Stop bits
________________________________________
2.2.7 Receive Logic
‚Ä¢	Detects start bit
‚Ä¢	Converts serial to parallel
‚Ä¢	Performs error detection:
o	Parity error
o	Framing error
o	Overrun
o	Break condition
‚Ä¢	Writes data and error info to Receive FIFO
________________________________________
2.2.8 Interrupt Generation Logic
‚Ä¢	Generates individual maskable interrupts for:
o	Transmit
o	Receive
o	Modem status
o	Error conditions
‚Ä¢	Also generates a combined interrupt output (logical OR of all interrupt sources)
‚Ä¢	Two usage modes:
o	Modular drivers: Use combined interrupt
o	Global interrupt controller: Use individual interrupt lines
________________________________________
2.2.9 DMA Interface
‚Ä¢	UART can raise request data transfers through a Direct Memory Access (DMA) controller.
‚Ä¢	Reduces CPU load during large or fast data transfers.
‚Ä¢	See Section 2.19 for details.
________________________________________
2.2.10 Synchronization Registers and Logic
‚Ä¢	The uart supports both asynchronous and synchronous operation clock pclk,uartclk.
‚Ä¢	Synchronization registers and handshaking logic have been implemented and are active at all times.
‚Ä¢	Synchronization of control sigal is performed on both directions of data flow.that is pclk to uartclk domain and uartclk to pclk domain. ________________________________________

2.2.11 Test Registers and Logic
‚Ä¢	Used only for integration and functional testing
‚Ä¢	Provides access to all UART inputs/outputs for verification
‚Ä¢	Do NOT use during normal operation
________________________________________
üìä Block Diagram (Figure 2-1 Summary)
The UART block diagram includes:
‚Ä¢	FIFO Buffers: 32√ó8 Transmit and 32√ó12 Receive
‚Ä¢	Transmit and Receive logic
‚Ä¢	Baud Rate Generator
‚Ä¢	APB Interface & Control Logic
‚Ä¢	DMA Interface
‚Ä¢	Interrupt Generator
‚Ä¢	Modem I/O (CTS, RTS, DSR, etc.)
‚Ä¢	IrDA Interface (SIRIN, SIROUT)
üìå Inputs like PCLK, PWRITE, PADDR, etc., are from the APB interface, while outputs like UARTTXD, UARTRXD are connected to serial lines or transceivers.
